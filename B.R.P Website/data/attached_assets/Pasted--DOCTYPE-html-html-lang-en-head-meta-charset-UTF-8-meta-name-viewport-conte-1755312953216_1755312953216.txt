<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Armâ€‘Swing Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    :root { color-scheme: light dark; }
    html { font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji"; }
    .card { @apply rounded-2xl shadow-lg border border-slate-200/60 dark:border-slate-700/50 bg-white/80 dark:bg-slate-900/60 backdrop-blur; }
    .stat { @apply text-slate-800 dark:text-slate-100; }
    .stat-label { @apply text-xs uppercase tracking-wider text-slate-500 dark:text-slate-400; }
    .stat-value { @apply text-3xl font-semibold; }
    .muted { @apply text-slate-500 dark:text-slate-400; }
    .badge { @apply inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium border border-slate-300/70 dark:border-slate-600/70; }
    .btn { @apply px-4 py-2 rounded-xl bg-slate-900 text-white dark:bg-white dark:text-slate-900 font-medium hover:opacity-90 transition; }
    .btn-ghost { @apply px-3 py-2 rounded-xl border border-slate-300/70 dark:border-slate-600/70 text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-800 transition; }
    .input { @apply w-full rounded-xl border border-slate-300/80 dark:border-slate-600/70 bg-white/80 dark:bg-slate-900/70 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-sky-500; }
    .kbd { @apply border rounded-md px-1.5 text-xs font-mono; }
    .pill { @apply rounded-full px-3 py-1 text-xs border; }
  </style>
</head>
<body class="bg-gradient-to-b from-slate-50 to-slate-100 dark:from-slate-950 dark:to-slate-900 min-h-screen">
<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
  <!-- Header -->
  <header class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between mb-6">
    <div>
      <h1 class="text-2xl sm:text-3xl font-extrabold tracking-tight text-slate-900 dark:text-white">Armâ€‘Swing Dashboard</h1>
      <p class="muted">ESP32 + Dual MPU6050 Â· Live from Google Apps Script endpoint</p>
    </div>
    <div class="flex items-center gap-2">
      <button id="darkToggle" class="btn-ghost" title="Toggle theme">ðŸŒ“ Theme</button>
      <button id="demoBtn" class="btn-ghost" title="Toggle demo data">ðŸ§ª Demo</button>
      <button id="refreshBtn" class="btn" title="Refresh now">âŸ³ Refresh</button>
    </div>
  </header>

  <!-- Controls Card -->
  <section class="card p-4 sm:p-6 mb-6">
    <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
      <label class="sm:w-48 text-sm font-medium text-slate-700 dark:text-slate-200">Apps Script Endpoint</label>
      <input id="endpoint" class="input" placeholder="https://script.google.com/macros/s/â€¦/exec" />
    </div>
    <div class="mt-3 grid grid-cols-1 sm:grid-cols-3 gap-3">
      <div class="text-sm muted">Status: <span id="status" class="badge">Idle</span></div>
      <div class="text-sm muted">Last updated: <span id="updated">â€“</span></div>
      <div class="text-sm muted">Autoâ€‘refresh: every <span class="kbd">10s</span> (while this tab is open)</div>
    </div>
    <p class="mt-3 text-xs muted">Note: This dashboard uses <span class="kbd">POST</span> with JSON to read data. In your Apps Script <code>doPost</code>, return JSON via <code>ContentService.createTextOutput(JSON.stringify(obj)).setMimeType(ContentService.MimeType.JSON)</code>. Publish the Web App as <em>Anyone with the link</em>. If you still see a CORS error, ensure you are returning JSON with <code>ContentService</code> (not <code>HtmlService</code>), or proxy through your own domain.</p>
  </section>

  <!-- Stats -->
  <section class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4 mb-6">
    <div class="card p-4"> <p class="stat-label">Left Count (last 10s)</p><p id="statLeftCount" class="stat stat-value">â€“</p></div>
    <div class="card p-4"> <p class="stat-label">Right Count (last 10s)</p><p id="statRightCount" class="stat stat-value">â€“</p></div>
    <div class="card p-4"> <p class="stat-label">Left Distance (cm)</p><p id="statLeftDist" class="stat stat-value">â€“</p></div>
    <div class="card p-4"> <p class="stat-label">Right Distance (cm)</p><p id="statRightDist" class="stat stat-value">â€“</p></div>
    <div class="card p-4"> <p class="stat-label">Total Distance (cm)</p><p id="statTotalDist" class="stat stat-value">â€“</p></div>
    <div class="card p-4"> <p class="stat-label">Left Share</p><p id="statLeftShare" class="stat stat-value">â€“</p></div>
  </section>

  <!-- Charts -->
  <section class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
    <div class="card p-4 sm:p-6">
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-lg font-semibold text-slate-900 dark:text-white">Distance per 10s Window</h2>
        <span class="pill border-sky-300/70 dark:border-sky-700/70 muted">Live line chart</span>
      </div>
      <canvas id="distChart" height="140"></canvas>
      <p class="mt-2 text-xs muted">Each point is one POST window (~10s). Distances are perâ€‘window, not cumulative.</p>
    </div>

    <div class="card p-4 sm:p-6">
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-lg font-semibold text-slate-900 dark:text-white">Counts per 10s Window</h2>
        <span class="pill border-emerald-300/70 dark:border-emerald-700/70 muted">Live line chart</span>
      </div>
      <canvas id="countChart" height="140"></canvas>
      <p class="mt-2 text-xs muted">Number of swings detected each window.</p>
    </div>
  </section>

  <section class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-12">
    <div class="card p-4 sm:p-6">
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-lg font-semibold text-slate-900 dark:text-white">Minute Totals</h2>
        <span class="pill border-orange-300/70 dark:border-orange-700/70 muted">Aggregated per minute</span>
      </div>
      <canvas id="minuteTotalsChart" height="160"></canvas>
      <p class="mt-2 text-xs muted">Sum of left/right distances per minute.</p>
    </div>

    <div class="card p-4 sm:p-6">
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-lg font-semibold text-slate-900 dark:text-white">Minute Fluctuation (Ïƒ)</h2>
        <span class="pill border-fuchsia-300/70 dark:border-fuchsia-700/70 muted">Std dev within each minute</span>
      </div>
      <canvas id="minuteFluctChart" height="160"></canvas>
      <p class="mt-2 text-xs muted">Fluctuation is the perâ€‘minute standard deviation of <em>total distance</em> across that minuteâ€™s ~6 windows (â‰ˆ10s each).</p>
    </div>
  </section>

  <!-- Table -->
  <section class="card p-4 sm:p-6">
    <div class="flex items-center justify-between mb-3">
      <h2 class="text-lg font-semibold text-slate-900 dark:text-white">Raw Data (latest 200)</h2>
      <div class="flex items-center gap-2 text-xs">
        <span class="badge">Timezone: local</span>
        <span id="syntheticBadge" class="badge hidden">Synthetic timestamps</span>
      </div>
    </div>
    <div class="overflow-x-auto">
      <table class="min-w-full text-sm">
        <thead>
        <tr class="text-left text-slate-600 dark:text-slate-300">
          <th class="py-2 pr-4">#</th>
          <th class="py-2 pr-4">Time</th>
          <th class="py-2 pr-4">Left Count</th>
          <th class="py-2 pr-4">Right Count</th>
          <th class="py-2 pr-4">Left Dist (cm)</th>
          <th class="py-2 pr-4">Right Dist (cm)</th>
          <th class="py-2 pr-4">Total Dist (cm)</th>
          <th class="py-2 pr-4">Left Share</th>
        </tr>
        </thead>
        <tbody id="dataBody" class="text-slate-800 dark:text-slate-100"></tbody>
      </table>
    </div>
  </section>
</div>

<script>
  // ====== Config ======
  const DEFAULT_ENDPOINT = "https://script.google.com/macros/s/AKfycbyGICmPIv5MoAG_g00EYbAM05sFYT9bZjBoAadXZyUFtRIloLAPKQfAzX1lkgUMqN1e5Q/exec";
  const FETCH_LIMIT = 200;            // show latest N rows
  const AUTO_REFRESH_MS = 10_000;     // device sends ~ every 10s
  const WINDOW_SECONDS = 10;          // synthetic timestamp spacing if missing

  // ====== State ======
  let distChart, countChart, minuteTotalsChart, minuteFluctChart;
  let demoMode = false;

  // Theme toggle
  const darkToggle = document.getElementById('darkToggle');
  darkToggle.addEventListener('click', () => {
    document.documentElement.classList.toggle('dark');
  });

  // Restore endpoint from localStorage
  const endpointInput = document.getElementById('endpoint');
  endpointInput.value = localStorage.getItem('armdash:endpoint') || DEFAULT_ENDPOINT;
  endpointInput.addEventListener('change', () => {
    localStorage.setItem('armdash:endpoint', endpointInput.value.trim());
    refresh();
  });

  // Buttons
  document.getElementById('refreshBtn').addEventListener('click', refresh);
  document.getElementById('demoBtn').addEventListener('click', () => {
    demoMode = !demoMode;
    document.getElementById('demoBtn').classList.toggle('ring-2');
    refresh();
  });

  const statusEl = document.getElementById('status');
  const updatedEl = document.getElementById('updated');
  const dataBody = document.getElementById('dataBody');

  // ====== Utilities ======
  function setStatus(text, kind = 'neutral') {
    statusEl.textContent = text;
    const base = 'inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium border';
    statusEl.className = base + ' ' + (
            kind === 'ok' ? 'border-emerald-300/70 dark:border-emerald-700/70' :
                    kind === 'warn' ? 'border-amber-300/70 dark:border-amber-700/70' :
                            kind === 'err' ? 'border-rose-300/70 dark:border-rose-700/70' :
                                    'border-slate-300/70 dark:border-slate-600/70'
    );
  }

  const tryKeys = (obj, keys) => {
    for (const k of keys) if (obj[k] !== undefined) return obj[k];
    // also try case-insensitive
    const lower = Object.fromEntries(Object.entries(obj).map(([k,v]) => [k.toLowerCase(), v]));
    for (const k of keys.map(k => String(k).toLowerCase())) if (lower[k] !== undefined) return lower[k];
    return undefined;
  };

  function toNumber(x) {
    const n = typeof x === 'string' ? parseFloat(x) : Number(x);
    return Number.isFinite(n) ? n : 0;
  }

  function isoMinute(d){
    const y = d.getFullYear();
    const m = String(d.getMonth()+1).padStart(2,'0');
    const dd = String(d.getDate()).padStart(2,'0');
    const hh = String(d.getHours()).padStart(2,'0');
    const mm = String(d.getMinutes()).padStart(2,'0');
    return `${y}-${m}-${dd} ${hh}:${mm}`;
  }

  function stddev(values) {
    if (values.length <= 1) return 0;
    const mean = values.reduce((a,b)=>a+b,0) / values.length;
    const m2 = values.reduce((a,b)=>a+(b-mean)*(b-mean),0) / (values.length);
    return Math.sqrt(m2);
  }

  // ====== Normalization ======
  function normalize(raw) {
    // Expected shape: array of objects with keys leftCount, leftDistance, rightCount, rightDistance, timestamp
    let rows = [];
    if (Array.isArray(raw)) {
      rows = raw;
    } else if (raw && Array.isArray(raw.data)) {
      rows = raw.data;
    } else if (raw && Array.isArray(raw.rows)) {
      rows = raw.rows;
    } else if (raw && raw.values && Array.isArray(raw.values)) {
      rows = raw.values;
    } else {
      throw new Error('Unrecognized JSON shape');
    }

    // Trim to latest N if too big
    if (rows.length > FETCH_LIMIT) rows = rows.slice(-FETCH_LIMIT);

    const out = [];
    for (let i=0;i<rows.length;i++){
      const r = rows[i];
      const lc = toNumber(tryKeys(r, ['leftCount','lcount','left_count']));
      const rc = toNumber(tryKeys(r, ['rightCount','rcount','right_count']));
      const ld = toNumber(tryKeys(r, ['leftDistance','ldist','left_distance']));
      const rd = toNumber(tryKeys(r, ['rightDistance','rdist','right_distance']));
      let ts = tryKeys(r, ['timestamp','time','createdAt','created_at','Date','date','ts']);
      if (typeof ts === 'number') ts = new Date(ts).toISOString();
      out.push({ lc, rc, ld, rd, ts, raw: r });
    }

    let synthetic = false;
    // If timestamps missing, synthesize assuming 10s spacing ending now
    if (out.every(o => !o.ts)) {
      synthetic = true;
      const now = Date.now();
      const N = out.length;
      for (let i=0;i<N;i++){
        const t = now - (N-1-i)*WINDOW_SECONDS*1000;
        out[i].ts = new Date(t).toISOString();
      }
    }

    // Sort by ts asc
    out.sort((a,b) => new Date(a.ts) - new Date(b.ts));

    return { rows: out, synthetic };
  }

  // ====== Rendering ======
  function updateStats(latest){
    const leftShare = (latest.ld + latest.rd) > 0 ? (latest.ld / (latest.ld + latest.rd)) : 0.5;
    document.getElementById('statLeftCount').textContent = latest.lc.toFixed(0);
    document.getElementById('statRightCount').textContent = latest.rc.toFixed(0);
    document.getElementById('statLeftDist').textContent = latest.ld.toFixed(1);
    document.getElementById('statRightDist').textContent = latest.rd.toFixed(1);
    document.getElementById('statTotalDist').textContent = (latest.ld + latest.rd).toFixed(1);
    document.getElementById('statLeftShare').textContent = (leftShare*100).toFixed(1) + '%';
  }

  function renderTable(rows){
    dataBody.innerHTML = '';
    const fmt = { hour: '2-digit', minute: '2-digit', second: '2-digit' };
    rows.forEach((r, idx) => {
      const tr = document.createElement('tr');
      tr.className = idx % 2 ? 'bg-slate-50/60 dark:bg-slate-800/50' : '';
      const total = r.ld + r.rd;
      const share = total>0 ? r.ld/total : 0.5;
      tr.innerHTML = `
          <td class="py-2 pr-4">${rows.length-idx}</td>
          <td class="py-2 pr-4">${new Date(r.ts).toLocaleString(undefined, fmt)}</td>
          <td class="py-2 pr-4">${r.lc}</td>
          <td class="py-2 pr-4">${r.rc}</td>
          <td class="py-2 pr-4">${r.ld.toFixed(1)}</td>
          <td class="py-2 pr-4">${r.rd.toFixed(1)}</td>
          <td class="py-2 pr-4">${total.toFixed(1)}</td>
          <td class="py-2 pr-4">${(share*100).toFixed(1)}%</td>`;
      dataBody.appendChild(tr);
    });
  }

  function buildTimeSeries(rows){
    const labels = rows.map(r => new Date(r.ts));
    const leftD = rows.map(r => r.ld);
    const rightD = rows.map(r => r.rd);
    const leftC = rows.map(r => r.lc);
    const rightC = rows.map(r => r.rc);

    const dtAdapter = (d) => new Date(d).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit', second:'2-digit'});
    const lab = labels.map(dtAdapter);

    // Distance chart
    const distData = {
      labels: lab,
      datasets: [
        { label: 'Left Distance (cm)', data: leftD, tension: 0.25 },
        { label: 'Right Distance (cm)', data: rightD, tension: 0.25 },
      ]
    };

    const countData = {
      labels: lab,
      datasets: [
        { label: 'Left Count', data: leftC, tension: 0.25 },
        { label: 'Right Count', data: rightC, tension: 0.25 },
      ]
    };

    if (!distChart) {
      distChart = new Chart(document.getElementById('distChart'), {
        type: 'line',
        data: distData,
        options: {
          responsive: true,
          animation: false,
          interaction: { mode: 'index', intersect: false },
          plugins: { legend: { position: 'bottom' } },
          scales: { y: { beginAtZero: true } }
        }
      });
    } else {
      distChart.data = distData; distChart.update();
    }

    if (!countChart) {
      countChart = new Chart(document.getElementById('countChart'), {
        type: 'line',
        data: countData,
        options: {
          responsive: true,
          animation: false,
          interaction: { mode: 'index', intersect: false },
          plugins: { legend: { position: 'bottom' } },
          scales: { y: { beginAtZero: true, ticks: { precision: 0 } } }
        }
      });
    } else {
      countChart.data = countData; countChart.update();
    }
  }

  function buildMinuteAggregates(rows){
    // Group into minutes
    const groups = new Map();
    for (const r of rows) {
      const key = isoMinute(new Date(r.ts));
      if (!groups.has(key)) groups.set(key, []);
      groups.get(key).push(r);
    }
    // Sort keys
    const minutes = [...groups.keys()].sort();

    const minuteLabels = minutes;
    const leftTotals = [];
    const rightTotals = [];
    const totalFluct = []; // stddev of total distance per 10s within minute

    for (const key of minutes) {
      const arr = groups.get(key);
      const lt = arr.reduce((s,r)=>s+r.ld,0);
      const rt = arr.reduce((s,r)=>s+r.rd,0);
      leftTotals.push(lt);
      rightTotals.push(rt);
      const totals = arr.map(r => r.ld + r.rd);
      totalFluct.push(stddev(totals));
    }

    const totalsData = {
      labels: minuteLabels,
      datasets: [
        { label: 'Left Distance (cm/min)', data: leftTotals },
        { label: 'Right Distance (cm/min)', data: rightTotals },
      ]
    };

    if (!minuteTotalsChart) {
      minuteTotalsChart = new Chart(document.getElementById('minuteTotalsChart'), {
        type: 'bar',
        data: totalsData,
        options: {
          responsive: true,
          animation: false,
          plugins: { legend: { position: 'bottom' } },
          scales: { y: { beginAtZero: true } }
        }
      });
    } else {
      minuteTotalsChart.data = totalsData; minuteTotalsChart.update();
    }

    const fluctData = {
      labels: minuteLabels,
      datasets: [ { label: 'Ïƒ (Total Distance per 10s within minute)', data: totalFluct } ]
    };

    if (!minuteFluctChart) {
      minuteFluctChart = new Chart(document.getElementById('minuteFluctChart'), {
        type: 'line',
        data: fluctData,
        options: {
          responsive: true,
          animation: false,
          plugins: { legend: { position: 'bottom' } },
          scales: { y: { beginAtZero: true } }
        }
      });
    } else {
      minuteFluctChart.data = fluctData; minuteFluctChart.update();
    }
  }

  // ====== Fetching ======
  async function fetchJSON(url) {
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ action: 'read', limit: FETCH_LIMIT })
    });
    const ct = res.headers.get('content-type') || '';
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    if (ct.includes('application/json')) return res.json();
    const text = await res.text();
    try { return JSON.parse(text); } catch {}
    const start = text.indexOf('{');
    const end = text.lastIndexOf('}');
    if (start !== -1 && end !== -1) {
      try { return JSON.parse(text.slice(start, end+1)); } catch {}
    }
    throw new Error('Response is not JSON');
  }
  throw new Error('Response is not JSON');
  }

  function makeDemo(n=90){
    // ~15 minutes of synthetic data
    const out=[]; const now=Date.now();
    let bias = Math.random()*0.2+0.4; // left share baseline
    for (let i=n-1;i>=0;i--){
      const t = new Date(now - i*WINDOW_SECONDS*1000).toISOString();
      const speed = 6 + Math.random()*10; // cm per 10s
      const jitter = (Math.random()-0.5)*2; // +/-1
      const total = Math.max(0, speed + jitter);
      const leftShare = Math.min(0.8, Math.max(0.2, bias + (Math.random()-0.5)*0.1));
      const ld = +(total*leftShare).toFixed(1);
      const rd = +(total*(1-leftShare)).toFixed(1);
      const lc = Math.round(2 + Math.random()*4);
      const rc = Math.round(2 + Math.random()*4);
      out.push({ leftCount: lc, rightCount: rc, leftDistance: ld, rightDistance: rd, timestamp: t });
    }
    return { data: out };
  }

  async function refresh(){
    setStatus('Fetchingâ€¦');
    try {
      const json = demoMode ? makeDemo() : await fetchJSON(endpointInput.value.trim());
      const { rows, synthetic } = normalize(json);

      // Badge if synthetic timestamps used
      document.getElementById('syntheticBadge').classList.toggle('hidden', !synthetic);

      if (!rows.length) { setStatus('No data', 'warn'); return; }
      updateStats(rows[rows.length-1]);
      renderTable(rows.slice().reverse()); // newest first in table
      buildTimeSeries(rows);
      buildMinuteAggregates(rows);

      setStatus('OK', 'ok');
      updatedEl.textContent = new Date().toLocaleString();
    } catch (err) {
      console.error(err);
      setStatus(err.message.includes('CORS') ? 'CORS blocked' : ('Error: '+err.message), 'err');
    }
  }

  // Auto refresh loop
  refresh();
  setInterval(refresh, AUTO_REFRESH_MS);
</script>
</body>
</html>
